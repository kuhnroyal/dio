name: dio_workspace
repository: https://github.com/cfug/dio

packages:
  - '*'
  - 'plugins/*'
  - 'plugins/*/example*'

categories:
  min:
    - '*'
    - 'plugins/compatibility_layer'
    - 'plugins/compatibility_layer/example'
    - 'plugins/cookie_manager'
    - 'plugins/cookie_manager/example'
    - 'plugins/http2_adapter'
    - 'plugins/http2_adapter/example'
  stable:
    - '*'
    - 'plugins/*'
    - 'plugins/*/example'

ide:
  intellij:
    enabled: true
    moduleNamePrefix: ''

command:
  bootstrap:
    runPubGetInParallel: false
  clean:
    hooks:
      post: |
        set -e
        # Clean all flutter projects
        melos exec --flutter -- "flutter clean"
        # Clean coverage files
        melos exec rm -rf coverage
        melos exec rm -rf pubspec.lock
        melos exec --dir-exists coverage -- "rm -rf coverage"

scripts:
  analyze:
    description: Analyze all packages
    exec: dart analyze --fatal-infos
  format:
    description: Format check all packages
    exec: dart format --set-exit-if-changed .
  format:fix:
    description: Format all packages
    exec: dart format .
  publish-dry-run:
    description: Publish dry-run all packages
    exec: dart pub publish --dry-run
    packageFilters:
      noPrivate: true
  httpbun:local:
    description: Run httpbun locally
    run: echo "const httpbunBaseUrl = 'https://httpbun.local';" > dio_test/lib/src/httpbun.dart
  httpbun:com:
    description: Run httpbun locally
    run: echo "const httpbunBaseUrl = 'https://httpbun.com';" > dio_test/lib/src/httpbun.dart

  test:
    name: All tests
    run: |
      set -e
      melos run test:vm
      melos run test:web:chrome
      melos run test:web:firefox
      melos run test:flutter
  test:vm:
    name: Dart VM tests
    exec: dart test --preset=${TEST_PRESET:-default},${TARGET_DART_SDK:-stable} --chain-stack-traces
    packageFilters:
      flutter: false
      dirExists: test
      ignore:
        - 'dio_web_adapter'
  test:vm:coverage:
    name: Dart VM tests with coverage
    run: melos test:vm -- --coverage=coverage/vm
  test:web:
    name: Dart Web tests
    run: |
      set -e
      melos run test:web:chrome
      melos run test:web:firefox
  test:web:chrome:
    name: Dart Web tests in chrome
    exec: dart test --platform chrome --preset=${TEST_PRESET:-default},${TARGET_DART_SDK:-stable} --chain-stack-traces --compiler=dart2wasm
    packageFilters:
      flutter: false
      dirExists: test
      ignore:
        - '*http2*'
        - '*cookie*'
  test:web:chrome:coverage:
    name: Dart Web tests in chrome with coverage
    run: test:web:chrome -- --coverage=coverage/chrome
  test:web:firefox:
    name: Dart Web tests in firefox
    exec: dart test --platform firefox --preset=${TEST_PRESET:-default},${TARGET_DART_SDK:-stable} --chain-stack-traces
    packageFilters:
      flutter: false
      dirExists: test
      ignore:
        - '*http2*'
        - '*cookie*'
  test:web:firefox:coverage:
    name: Dart Web tests in firefox with coverage
    run: test:web:firefox -- --coverage=coverage/firefox
  test:flutter:
    name: Flutter tests
    exec: flutter test
    packageFilters:
      flutter: true
      dirExists: test
      ignore:
        - '*example*'
  test:flutter:coverage:
    name: Flutter tests with coverage
    run: melos flutter:test -- --coverage
  test:coverage:
    name: Run all tests and display coverage
    run: |
      set -e
      melos run test:vm:coverage
      melos run test:web:chrome:coverage
      melos run test:web:firefox:coverage
      melos run test:flutter
      melos run coverage:format
      melos run coverage:show

  upgrade:dart:
    name: Upgrade Dart package deps
    exec: dart pub upgrade
    packageFilters:
      flutter: false
  upgrade:flutter:
    name: Upgrade Flutter package deps
    exec: flutter pub upgrade
    packageFilters:
      flutter: true
  build:example:apk:
    exec: flutter build apk --debug
    packageFilters:
      scope:
        - 'dio_flutter_example'
  coverage:clean:
    name: Clear coverage
    exec: rm -rf coverage
  coverage:format:
    name: Format coverage
    run: |
      set -e
      dart pub global activate coverage
      melos run coverage:format:package
  coverage:format:package:
    name: Format coverage for each package
    exec: dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --report-on=lib
    packageFilters:
      flutter: false
      dirExists: coverage
  coverage:combine:
    name: Combine & convert coverage report
    run: |
      set -e
      rm -rf coverage
      dart pub global activate combine_coverage
      dart pub global activate cobertura
      melos run coverage:format
      dart pub global run combine_coverage --repo-path=$pwd
      dart pub global run cobertura convert --pubspec dio/pubspec.yaml
  coverage:show:
    name: Show coverage report
    run: |
      set -e
      melos run coverage:combine
      dart pub global run cobertura show
